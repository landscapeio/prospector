name: CI

on: [push, pull_request]

env:
  CACHE_VERSION: 3
  DEFAULT_PYTHON: 3.7

jobs:
  prepare-base:
    name: Prepare base dependencies
    runs-on: ubuntu-latest
    outputs:
      python-key: ${{ steps.generate-python-key.outputs.key }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Generate partial Python venv restore key
        id: generate-python-key
        run: >-
          echo "::set-output name=key::base-venv-${{ env.CACHE_VERSION }}-${{
            hashFiles('pyproject.toml')
          }}"
      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: venv
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            steps.generate-python-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-base-venv-${{ env.CACHE_VERSION }}-
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          python -m pip install --disable-pip-version-check -U pip poetry
          poetry install -E with_everything

  prepare-tests-linux:
    name: Prepare tests for Python ${{ matrix.python-version }} (Linux)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, "3.10"]
    outputs:
      python-key: ${{ steps.generate-python-key.outputs.key }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Generate partial Python venv restore key
        id: generate-python-key
        run: >-
          echo "::set-output name=key::venv-${{ env.CACHE_VERSION }}-${{
            hashFiles('pyproject.toml')
          }}"
      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: venv
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            steps.generate-python-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{ env.CACHE_VERSION }}-
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          python -m pip install --disable-pip-version-check -U pip poetry
          poetry install -E with_everything

  test-linux:
    name: Run tests Python ${{ matrix.python-version }} (Linux)
    runs-on: ubuntu-latest
    needs: prepare-tests-linux
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9, "3.10"]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: venv
          key:
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.prepare-tests-linux.outputs.python-key }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python venv from cache"
          exit 1
      - name: Run pytest
        run: |
          . venv/bin/activate
          python -m pip install --disable-pip-version-check -U pip poetry
          poetry install
          pytest --benchmark-disable --cov --cov-report= tests/
      - name: Check that Prospector can run
        run: |
          . venv/bin/activate
          echo "Checking prospector can run; don't care about messages found, only that it runs successfully"
          prospector --quiet --zero-exit
          echo "Prospector ran successfully."
      - name: Build and validate packages
        run: |
          . venv/bin/activate
          echo "Building packages"
          rm -rf dist/
          poetry build
          echo "Validating packages"
          twine check dist/*
          echo "Packages build and valdiate successfully."
