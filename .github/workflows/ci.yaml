name: CI

on:
  push:
    branches:
      - master
  pull_request: ~

env:
  CACHE_VERSION: 3
  DEFAULT_PYTHON: 3.6
  PRE_COMMIT_CACHE: ~/.cache/pre-commit

jobs:
  prepare-base:
    name: Prepare base dependencies
    runs-on: ubuntu-latest
    outputs:
      python-key: ${{ steps.generate-python-key.outputs.key }}
      pre-commit-key: ${{ steps.generate-pre-commit-key.outputs.key }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Generate partial Python venv restore key
        id: generate-python-key
        run: >-
          echo "::set-output name=key::base-venv-${{ env.CACHE_VERSION }}-${{
            hashFiles('setup.cfg')
          }}"
      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v2.1.6
        with:
          path: venv
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            steps.generate-python-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-base-venv-${{ env.CACHE_VERSION }}-
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          python -m pip install -U pip setuptools wheel
          pip3 install coveralls coverage pre-commit pytest-cov pytest-benchmark
          pip3 install -e ".["with_everything"]"
      - name: Generate pre-commit restore key
        id: generate-pre-commit-key
        run: >-
          echo "::set-output name=key::pre-commit-${{ env.CACHE_VERSION }}-${{
            hashFiles('.pre-commit-config.yaml') }}"
      - name: Restore pre-commit environment
        id: cache-precommit
        uses: actions/cache@v2.1.6
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: >-
            ${{ runner.os }}-${{ steps.generate-pre-commit-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-${{ env.CACHE_VERSION }}-
      - name: Install pre-commit dependencies
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          . venv/bin/activate
          pre-commit install --install-hooks

  formatting:
    name: Run pre-commit checks
    runs-on: ubuntu-latest
    needs: prepare-base
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: Set up Python ${{ env.DEFAULT_PYTHON }}
        id: python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}
      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v2.1.6
        with:
          path: venv
          key:
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.prepare-base.outputs.python-key }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python venv from cache"
          exit 1
      - name: Restore pre-commit environment
        id: cache-precommit
        uses: actions/cache@v2.1.6
        with:
          path: ${{ env.PRE_COMMIT_CACHE }}
          key: ${{ runner.os }}-${{ needs.prepare-base.outputs.pre-commit-key }}
      - name: Fail job if pre-commit cache restore failed
        if: steps.cache-precommit.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore pre-commit environment from cache"
          exit 1
      - name: Run formatting check
        run: |
          . venv/bin/activate
          pip install -e .
          pre-commit run --all-files

  prepare-tests-linux:
    name: Prepare tests for Python ${{ matrix.python-version }} (Linux)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, 3.10-dev]
    outputs:
      python-key: ${{ steps.generate-python-key.outputs.key }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Generate partial Python venv restore key
        id: generate-python-key
        run: >-
          echo "::set-output name=key::venv-${{ env.CACHE_VERSION }}-${{
            hashFiles('setup.cfg')
          }}"
      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v2.1.6
        with:
          path: venv
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            steps.generate-python-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-venv-${{ env.CACHE_VERSION }}-
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          python -m pip install -U pip setuptools wheel coveralls coverage pre-commit pytest-cov pytest-benchmark
          pip3 install -e ".["with_everything"]"

  pytest-linux:
    name: Run tests Python ${{ matrix.python-version }} (Linux)
    runs-on: ubuntu-latest
    needs: prepare-tests-linux
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, 3.10-dev]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v2.1.6
        with:
          path: venv
          key:
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.prepare-tests-linux.outputs.python-key }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python venv from cache"
          exit 1
      - name: Run pytest
        run: |
          . venv/bin/activate
          python -m pip install -U pip setuptools wheel coveralls coverage pre-commit pytest-cov pytest-benchmark
          pytest --benchmark-disable --cov --cov-report= tests/


  nosetests-linux:
    name: Run nosetests Python ${{ matrix.python-version }} (Linux)
    runs-on: ubuntu-latest
    needs: prepare-tests-linux
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, 3.10-dev]
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2.3.4
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Restore Python virtual environment
        id: cache-venv
        uses: actions/cache@v2.1.6
        with:
          path: venv
          key:
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.prepare-tests-linux.outputs.python-key }}
      - name: Fail job if Python cache restore failed
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          echo "Failed to restore Python venv from cache"
          exit 1
      - name: Run nosetests
        run: |
          . venv/bin/activate
          pip install safety pipenv numpy tzlocal nose coverage coveralls -U
          pip freeze | safety check --stdin
          nosetests -s --with-coverage --cover-inclusive --cover-package=prospector tests/
          mv .coverage .coverage.x
          coverage run --parallel-mode prospector/run.py || true
          coverage combine
          coverage report --show-missing
